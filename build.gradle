def VERSION = '0.9.2'
group 'io.github.tronprotocol'

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
        }
        mavenCentral()
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

ext {
    bouncycastleVersion = '1.78.1'
    junitJupiterVersion = '5.4.2'
    googleGuavaVersion = '33.0.0-jre'
}

allprojects {
    version = VERSION

    repositories {
        mavenCentral()
    }


    tasks.withType(Javadoc).tap {
        configureEach {
            options.encoding = 'UTF-8'
            options.charSet = 'UTF-8'
            options.addStringOption('Xdoclint:none', '-quiet')

            options {
                tags = [
                        'apiNote:a:API Note:',
                        'implSpec:a:Implementation Requirements:',
                        'implNote:a:Implementation Note:'
                ]
            }

            exclude '**/internal/**'
            exclude '**/impl/**'
            failOnError = false

            logging.captureStandardError LogLevel.INFO
            logging.captureStandardOutput LogLevel.INFO
        }
    }

//    configurations.configureEach {
//        resolutionStrategy {
//            force "com.google.guava:guava:$googleGuavaVersion"
//        }
//    }
}

//configurations.all {
//    exclude group: 'com.google.guava', module: 'guava'
//}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    tasks.withType(Jar).configureEach {
        destinationDirectory = rootProject.file("build/libs")
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation "io.smallrye:smallrye-fault-tolerance-core:6.3.0" //high
//       implementation "org.apache.james.protocols:protocols-imap:3.8.0"
        implementation "com.liferay.portal:release.portal.bom:7.4.3.82" //mid
        implementation "net.snowflake:snowflake-jdbc:3.2.3"
        implementation "io.smallrye:smallrye-fault-tolerance-core:6.3.0" //high
//       implementation "org.apache.james.protocols:protocols-imap:3.8.0"
        implementation "com.liferay.portal:release.portal.bom:7.4.3.82" //mid
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(JavaCompile).configureEach {
        //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    configurations {
        checkstyleConfig
    }
    configurations.named('checkstyleConfig') {
        transitive = false
    }
    checkstyle {
        toolVersion = "8.29"
        configFile = file("../config/checkstyle/checkStyleAll.xml")
    }
    checkstyleMain {
        source = 'src/main/java'
        exclude '**/trident/api/**'
        exclude '**/trident/proto/**'
    }
    checkstyleTest {
        source = files() //use empty files to ignore test class
    }

//    configurations.all {
//        exclude group: 'com.google.guava', module: 'guava'
//    }
}

shadowJar {
    zip64 = true
}

javadoc {
    source subprojects.collect { project ->
        project.sourceSets.main.allJava
    }
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}

tasks.register('javadocJar', Jar) {
    archiveClassifier = 'javadoc'
    archiveVersion = VERSION
    from javadoc
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    archiveVersion = VERSION
    from subprojects.collect { project ->
        project.sourceSets.main.allSource
    }
}

tasks.register('buildLib', Jar) {
    archiveVersion = VERSION
    from subprojects.collect { project ->
        project.sourceSets.main.output
    }
}

tasks.named('build') {
    dependsOn javadocJar, sourcesJar, buildLib
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

task allDependencies(type: DependencyReportTask) {
    projects = project.allprojects
    outputFile = new File("${buildDir}/reports/project-dependencies.txt")
}
